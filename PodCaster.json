{"id":"6f58e6e1-e6d0-4847-a054-c73df95cb202","data":{"nodes":[{"id":"TextInput-PbADQ","type":"genericNode","position":{"x":-691.4486606893381,"y":255.39393058255735},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"Sandro","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["Message"],"display_name":"Host1","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"TextInput-PbADQ"},"selected":false,"width":384,"height":302,"positionAbsolute":{"x":-691.4486606893381,"y":255.39393058255735},"dragging":false},{"id":"GoogleGenerativeAIModel-fNqmX","type":"genericNode","position":{"x":1322.851283551928,"y":118.44461967188951},"data":{"type":"GoogleGenerativeAIModel","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import DropdownInput, FloatInput, IntInput, SecretStrInput\n\n\nclass GoogleGenerativeAIComponent(LCModelComponent):\n    display_name = \"Google Generative AI\"\n    description = \"Generate text using Google Generative AI.\"\n    icon = \"GoogleGenerativeAI\"\n    name = \"GoogleGenerativeAIModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_output_tokens\",\n            display_name=\"Max Output Tokens\",\n            info=\"The maximum number of tokens to generate.\",\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            info=\"The name of the model to use.\",\n            options=[\"gemini-1.5-pro\", \"gemini-1.5-flash\", \"gemini-1.0-pro\", \"gemini-1.0-pro-vision\"],\n            value=\"gemini-1.5-pro\",\n        ),\n        SecretStrInput(\n            name=\"google_api_key\",\n            display_name=\"Google API Key\",\n            info=\"The Google API Key to use for the Google Generative AI.\",\n        ),\n        FloatInput(\n            name=\"top_p\",\n            display_name=\"Top P\",\n            info=\"The maximum cumulative probability of tokens to consider when sampling.\",\n            advanced=True,\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"n\",\n            display_name=\"N\",\n            info=\"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"top_k\",\n            display_name=\"Top K\",\n            info=\"Decode using top-k sampling: consider the set of top_k most probable tokens. Must be positive.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        try:\n            from langchain_google_genai import ChatGoogleGenerativeAI\n        except ImportError:\n            raise ImportError(\"The 'langchain_google_genai' package is required to use the Google Generative AI model.\")\n\n        google_api_key = self.google_api_key\n        model = self.model\n        max_output_tokens = self.max_output_tokens\n        temperature = self.temperature\n        top_k = self.top_k\n        top_p = self.top_p\n        n = self.n\n\n        output = ChatGoogleGenerativeAI(  # type: ignore\n            model=model,\n            max_output_tokens=max_output_tokens or None,\n            temperature=temperature,\n            top_k=top_k or None,\n            top_p=top_p or None,\n            n=n or 1,\n            google_api_key=SecretStr(google_api_key),\n        )\n\n        return output  # type: ignore\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"google_api_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"name":"google_api_key","value":"","display_name":"Google API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The Google API Key to use for the Google Generative AI.","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageInput"},"max_output_tokens":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"max_output_tokens","value":"","display_name":"Max Output Tokens","advanced":false,"dynamic":false,"info":"The maximum number of tokens to generate.","title_case":false,"type":"int","_input_type":"IntInput"},"model":{"trace_as_metadata":true,"options":["gemini-1.5-pro","gemini-1.5-flash","gemini-1.0-pro","gemini-1.0-pro-vision"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"model","value":"gemini-1.5-flash","display_name":"Model","advanced":false,"dynamic":false,"info":"The name of the model to use.","title_case":false,"type":"str","_input_type":"DropdownInput"},"n":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"n","value":"","display_name":"N","advanced":true,"dynamic":false,"info":"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.","title_case":false,"type":"int","_input_type":"IntInput"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"stream","value":false,"display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool","_input_type":"BoolInput"},"system_message":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_message","value":"","display_name":"System Message","advanced":true,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"temperature","value":0.1,"display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float","_input_type":"FloatInput"},"top_k":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"top_k","value":"","display_name":"Top K","advanced":true,"dynamic":false,"info":"Decode using top-k sampling: consider the set of top_k most probable tokens. Must be positive.","title_case":false,"type":"int","_input_type":"IntInput"},"top_p":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"top_p","value":"","display_name":"Top P","advanced":true,"dynamic":false,"info":"The maximum cumulative probability of tokens to consider when sampling.","title_case":false,"type":"float","_input_type":"FloatInput"}},"description":"Generate text using Google Generative AI.","icon":"GoogleGenerativeAI","base_classes":["LanguageModel","Message"],"display_name":"Google Generative AI","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","system_message","stream","max_output_tokens","model","google_api_key","top_p","temperature","n","top_k"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"GoogleGenerativeAIModel-fNqmX"},"selected":false,"width":384,"height":691,"positionAbsolute":{"x":1322.851283551928,"y":118.44461967188951},"dragging":false},{"id":"Prompt-93qT2","type":"genericNode","position":{"x":614.4077606776494,"y":185.051897154849},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"você é um apresentador de podcast experiente...\n\n- com base no texto abaixo:\n\n {contexto}\n\nVocê pode criar uma conversa envolvente entre duas pessoas.\n- faça a conversa ter pelo menos 10.000 caracteres com muita emoção.\n- na resposta para eu identificar use {host1} e {host2}.\n- {host1} está escrevendo os artigos e {host2} é a segunda palestrante que está fazendo todas as perguntas boas.\n- O podcast se chama \"{podcast}\".\n- Frases curtas que podem ser facilmente usadas com síntese de fala.\n- excitação durante a conversa.\n- não mencione sobrenomes.\n- {host1} e {host2} estão fazendo este podcast juntos. Evite frases como: \"Obrigada por me receber, {host1}!\"\n- Inclua palavras de preenchimento como äh ou repita palavras para tornar a conversa mais natural\n- sua resposta deve ser em formato JSON com separação de cada speaker como no exemplo abaixo:\n\n  \"id\": 1,\n  \"speaker_name\": \"João\",\n  \"fala\": \"Olá, seja muito bem vindo!\"\n\n  \"id\": 2,\n  \"speaker_name\": \"Maria\",\n  \"fala\": \"Olá, muito obrigada pelo convite!\"\n\n- não inclua nada em sua resposta além da formatação do JSON, nem no início nem no final da resposta.","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt","_input_type":"PromptInput"},"host1":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"host1","display_name":"host1","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"host2":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"host2","display_name":"host2","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"podcast":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"podcast","display_name":"podcast","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"contexto":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"contexto","display_name":"contexto","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["contexto","host1","host2","podcast"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false,"lf_version":"1.0.18"},"id":"Prompt-93qT2"},"selected":false,"width":384,"height":674,"positionAbsolute":{"x":614.4077606776494,"y":185.051897154849},"dragging":false},{"id":"TextInput-DIzmc","type":"genericNode","position":{"x":-693.5541679968392,"y":549.3373437246365},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"Laura","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["Message"],"display_name":"Host2","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"TextInput-DIzmc"},"selected":false,"width":384,"height":302,"positionAbsolute":{"x":-693.5541679968392,"y":549.3373437246365},"dragging":false},{"id":"TextInput-u0pOa","type":"genericNode","position":{"x":151.48125170467142,"y":729.6452408352764},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"Treinando Modelos Inteligentes","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["Message"],"display_name":"Nome do Podcast","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"TextInput-u0pOa"},"selected":false,"width":384,"height":302,"positionAbsolute":{"x":151.48125170467142,"y":729.6452408352764},"dragging":false},{"id":"File-BwTOa","type":"genericNode","position":{"x":-291.3506537273702,"y":-32.52915735082941},"data":{"type":"File","node":{"template":{"_type":"Component","path":{"trace_as_metadata":true,"file_path":"6f58e6e1-e6d0-4847-a054-c73df95cb202/2024-10-03_11-28-40_0_BNCC.pdf","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx"],"list":false,"required":false,"placeholder":"","show":true,"name":"path","value":"","display_name":"Path","advanced":false,"dynamic":false,"info":"Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx","title_case":false,"type":"file","_input_type":"FileInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from pathlib import Path\n\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, FileInput, Output\nfrom langflow.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"silent_errors":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"silent_errors","value":false,"display_name":"Silent Errors","advanced":true,"dynamic":false,"info":"If true, errors will not raise an exception.","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"A generic file loader.","icon":"file-text","base_classes":["Data"],"display_name":"File","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"load_file","value":"__UNDEFINED__","cache":true}],"field_order":["path","silent_errors"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"File-BwTOa"},"selected":false,"width":384,"height":302,"positionAbsolute":{"x":-291.3506537273702,"y":-32.52915735082941},"dragging":false},{"id":"ParseData-XjMWK","type":"genericNode","position":{"x":156.40242377624998,"y":140.08388534554734},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"data","value":"","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other","_input_type":"DataInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"sep","value":"\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"template","value":"{text}","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"ParseData-XjMWK"},"selected":false,"width":384,"height":378,"positionAbsolute":{"x":156.40242377624998,"y":140.08388534554734},"dragging":false},{"id":"JSONCleaner-KDp3k","type":"genericNode","position":{"x":1815.1759766426842,"y":230.73013924436611},"data":{"type":"JSONCleaner","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import json\nimport re\nimport unicodedata\nfrom langflow.custom import Component\nfrom langflow.inputs import MessageTextInput, BoolInput\nfrom langflow.template import Output\nfrom langflow.schema.message import Message\n\n\nclass JSONCleaner(Component):\n    display_name = \"JSON Cleaner\"\n    description = \"Cleans the messy and sometimes incorrect JSON strings produced by LLMs so that they are fully compliant with the JSON spec.\"\n    icon = \"custom_components\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"json_str\", display_name=\"JSON String\", info=\"The JSON string to be cleaned.\", required=True\n        ),\n        BoolInput(\n            name=\"remove_control_chars\",\n            display_name=\"Remove Control Characters\",\n            info=\"Remove control characters from the JSON string.\",\n            required=False,\n        ),\n        BoolInput(\n            name=\"normalize_unicode\",\n            display_name=\"Normalize Unicode\",\n            info=\"Normalize Unicode characters in the JSON string.\",\n            required=False,\n        ),\n        BoolInput(\n            name=\"validate_json\",\n            display_name=\"Validate JSON\",\n            info=\"Validate the JSON string to ensure it is well-formed.\",\n            required=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Cleaned JSON String\", name=\"output\", method=\"clean_json\"),\n    ]\n\n    def clean_json(self) -> Message:\n        try:\n            from json_repair import repair_json  # type: ignore\n        except ImportError:\n            raise ImportError(\n                \"Could not import the json_repair package.\" \"Please install it with `pip install json_repair`.\"\n            )\n\n        \"\"\"Clean the input JSON string based on provided options and return the cleaned JSON string.\"\"\"\n        json_str = self.json_str\n        remove_control_chars = self.remove_control_chars\n        normalize_unicode = self.normalize_unicode\n        validate_json = self.validate_json\n\n        try:\n            start = json_str.find(\"{\")\n            end = json_str.rfind(\"}\")\n            if start == -1 or end == -1:\n                raise ValueError(\"Invalid JSON string: Missing '{' or '}'\")\n            json_str = json_str[start : end + 1]\n\n            if remove_control_chars:\n                json_str = self._remove_control_characters(json_str)\n            if normalize_unicode:\n                json_str = self._normalize_unicode(json_str)\n            if validate_json:\n                json_str = self._validate_json(json_str)\n\n            cleaned_json_str = repair_json(json_str)\n            result = str(cleaned_json_str)\n\n            self.status = result\n            return Message(text=result)\n        except Exception as e:\n            raise ValueError(f\"Error cleaning JSON string: {str(e)}\")\n\n    def _remove_control_characters(self, s: str) -> str:\n        \"\"\"Remove control characters from the string.\"\"\"\n        return re.sub(r\"[\\x00-\\x1F\\x7F]\", \"\", s)\n\n    def _normalize_unicode(self, s: str) -> str:\n        \"\"\"Normalize Unicode characters in the string.\"\"\"\n        return unicodedata.normalize(\"NFC\", s)\n\n    def _validate_json(self, s: str) -> str:\n        \"\"\"Validate the JSON string.\"\"\"\n        try:\n            json.loads(s)\n            return s\n        except json.JSONDecodeError as e:\n            raise ValueError(f\"Invalid JSON string: {str(e)}\")\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"json_str":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":true,"placeholder":"","show":true,"name":"json_str","value":"","display_name":"JSON String","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The JSON string to be cleaned.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"normalize_unicode":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"normalize_unicode","value":false,"display_name":"Normalize Unicode","advanced":false,"dynamic":false,"info":"Normalize Unicode characters in the JSON string.","title_case":false,"type":"bool","_input_type":"BoolInput"},"remove_control_chars":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"remove_control_chars","value":false,"display_name":"Remove Control Characters","advanced":false,"dynamic":false,"info":"Remove control characters from the JSON string.","title_case":false,"type":"bool","_input_type":"BoolInput"},"validate_json":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"validate_json","value":false,"display_name":"Validate JSON","advanced":false,"dynamic":false,"info":"Validate the JSON string to ensure it is well-formed.","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Cleans the messy and sometimes incorrect JSON strings produced by LLMs so that they are fully compliant with the JSON spec.","icon":"custom_components","base_classes":["Message"],"display_name":"JSON Cleaner","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"output","display_name":"Cleaned JSON String","method":"clean_json","value":"__UNDEFINED__","cache":true}],"field_order":["json_str","remove_control_chars","normalize_unicode","validate_json"],"beta":false,"edited":false,"lf_version":"1.0.18"},"id":"JSONCleaner-KDp3k"},"selected":false,"width":384,"height":574,"positionAbsolute":{"x":1815.1759766426842,"y":230.73013924436611},"dragging":false},{"id":"JSONToDataComponent-i6WJv","type":"genericNode","position":{"x":2274.032457993778,"y":314.1362841732133},"data":{"type":"JSONToDataComponent","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import json\r\nfrom typing import Union, List\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import MessageInput, Output\r\nfrom langflow.schema import Data\r\n\r\nclass JSONToDataComponent(Component):\r\n    display_name = \"JSON to Data\"\r\n    description = \"Convert a JSON string to a Data object or a list of Data objects\"\r\n    icon = \"braces\"\r\n\r\n    inputs = [\r\n        MessageInput(\r\n            name=\"json_string\",\r\n            display_name=\"JSON String\",\r\n            info=\"Enter a valid JSON string (object or array) to convert to a Data object or list of Data objects\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(name=\"data\", display_name=\"Data\", method=\"convert_json_to_data\"),\r\n    ]\r\n\r\n    def convert_json_to_data(self) -> Union[Data, List[Data]]:\r\n        try:\r\n            json_string = self.json_string.text\r\n\r\n            # Try to parse the JSON string\r\n            try:\r\n                parsed_data = json.loads(json_string)\r\n            except json.JSONDecodeError:\r\n                # If JSON parsing fails, try to evaluate it as a Python literal\r\n                import ast\r\n                parsed_data = ast.literal_eval(json_string)\r\n\r\n            # Check if the parsed data is a list\r\n            if isinstance(parsed_data, list):\r\n                result = [Data(data=item) for item in parsed_data]\r\n            else:\r\n                result = Data(data=parsed_data)\r\n\r\n            self.status = result\r\n            return result\r\n\r\n        except (json.JSONDecodeError, SyntaxError, ValueError) as e:\r\n            error_message = f\"Invalid JSON or Python literal: {str(e)}\"\r\n            error_data = Data(data={\"error\": error_message})\r\n            self.status = error_data\r\n            return error_data\r\n\r\n        except Exception as e:\r\n            error_message = f\"An error occurred: {str(e)}\"\r\n            error_data = Data(data={\"error\": error_message})\r\n            self.status = error_data\r\n            return error_data","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"json_string":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"json_string","value":"","display_name":"JSON String","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter a valid JSON string (object or array) to convert to a Data object or list of Data objects","title_case":false,"type":"str","_input_type":"MessageInput"}},"description":"Convert a JSON string to a Data object or a list of Data objects","icon":"braces","base_classes":["Data"],"display_name":"JSON to Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"convert_json_to_data","value":"__UNDEFINED__","cache":true}],"field_order":["json_string"],"beta":false,"edited":true,"official":false,"lf_version":"1.0.18"},"id":"JSONToDataComponent-i6WJv"},"selected":false,"width":384,"height":330,"positionAbsolute":{"x":2274.032457993778,"y":314.1362841732133},"dragging":false},{"id":"TextInput-GOnXo","type":"genericNode","position":{"x":3035.688954525633,"y":53.67317184988366},"data":{"type":"ElevenLabsConfig","node":{"template":{"_type":"Component","roteiro":{"trace_as_metadata":true,"list":false,"trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"roteiro","value":"","display_name":"Falas do Podcast","advanced":false,"input_types":["Data"],"dynamic":false,"info":"Data Collection com as falas do Podcast a serem gravadas","title_case":false,"type":"other","_input_type":"DataInput"},"api_key":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"api_key","value":"sk_","display_name":"API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"API Key do ElevenLabs","title_case":false,"type":"str","_input_type":"MessageTextInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.io import Output, MessageTextInput, DataInput\nfrom langflow.schema.message import Message\nfrom langflow.schema import Data\nimport requests\nfrom pydub import AudioSegment\n\n\nclass ElevenLabsConfigComponent(Component):\n    display_name = \"ElevenLabsConfig\"\n    description = \"Get text inputs from ElevenLabs.\"\n    icon = \"speaker\"\n    name = \"ElevenLabsConfig\"\n\n    inputs = [\n        DataInput(\n            name=\"roteiro\",\n            display_name=\"Falas do Podcast\",\n            info=\"Data Collection com as falas do Podcast a serem gravadas\"\n        ),\n        MessageTextInput(\n            name=\"id_speaker1\",\n            display_name=\"Voz Speaker 1\",\n            info=\"ID da voz no ElevenLabs para o primeiro Speaker\",\n        ),\n        MessageTextInput(\n            name=\"id_speaker2\",\n            display_name=\"Voz Speaker 2\",\n            info=\"URL do ElevenLabs para o segundo Speaker\",\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"API Key do ElevenLabs\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Audio File Path\", name=\"audio_file_path\", method=\"generate_audio\"),\n    ]\n\n    def generate_audio(self) -> Data:\n        # Pegando as entradas fornecidas corretamente usando get_input\n        roteiro = self.get_input(\"roteiro\")\n        voice_speaker1 = self.get_input(\"id_speaker1\").value\n        voice_speaker2 = self.get_input(\"id_speaker2\").value\n        api_key = self.get_input(\"api_key\").value\n        \n        audio_files = []\n        \n        # Iterando sobre as falas do podcast (roteiro)\n        for row in roteiro.value:\n            id = row.data['id']\n            texto = row.data['fala']\n            \n            # Criando a URL com base no id do speaker\n            if id % 2 == 0:\n                voice_url = f\"https://api.elevenlabs.io/v1/text-to-speech/{voice_speaker2}\"\n                speaker2_name = row.data['speaker_name']\n            else:\n                voice_url = f\"https://api.elevenlabs.io/v1/text-to-speech/{voice_speaker1}\"\n                speaker1_name = row.data['speaker_name']\n\n            # Configuração do cabeçalho da API\n            cabecalho = {\n                \"Accept\": \"audio/mpeg\",\n                \"Content-Type\": \"application/json\",\n                \"xi-api-key\": api_key\n            }\n\n            # Dados para a solicitação POST\n            data = {\n                \"text\": texto,\n                \"model_id\": \"eleven_turbo_v2_5\",\n                \"voice_settings\": {\n                    \"stability\": 0.5,\n                    \"similarity_boost\": 0.75\n                }\n            }\n\n            # Fazendo a solicitação POST à API da Eleven Labs\n            response = requests.post(voice_url, json=data, headers=cabecalho)\n\n            # Gerando o nome do arquivo de saída\n            filename = f\"podcaster/audio_output{id}.mp3\"\n\n            # Salvando o arquivo de áudio retornado pela API\n            with open(filename, \"wb\") as audio_file:\n                for chunk in response.iter_content(chunk_size=1024):\n                    if chunk:\n                        audio_file.write(chunk)\n            \n            audio_files.append(filename)\n    \n        #gerando o podcast juntando todos os áudios\n        \n        output_file = f\"podcaster/podcast_{speaker1_name}_{speaker2_name}.mp3\"\n    \n        combined_audio = AudioSegment.from_mp3(audio_files[0])\n    \n    \n        # Itera sobre os arquivos de áudio e os adiciona ao combinado\n        for audio_file in audio_files[1:]:\n            next_audio = AudioSegment.from_mp3(audio_file)\n            combined_audio += next_audio  # Concatenando os áudios\n        \n        # Exporta o arquivo combinado\n        combined_audio.export(output_file, format=\"mp3\")\n        print(f\"Áudio combinado salvo como {output_file}\")\n\n    \n        # Retornando o caminho do arquivo gerado\n        return Data(data={\"audio_file_path\": output_file})\n        \n        \n        ","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"id_speaker1":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"id_speaker1","value":"WVZbhU7wjzSjjrmdvBOD11","display_name":"Voz Speaker 1","advanced":false,"input_types":["Message"],"dynamic":false,"info":"ID da voz no ElevenLabs para o primeiro Speaker","title_case":false,"type":"str","_input_type":"MessageTextInput"},"id_speaker2":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"id_speaker2","value":"JS31klgbsEQinAiJIo4E11","display_name":"Voz Speaker 2","advanced":false,"input_types":["Message"],"dynamic":false,"info":"URL do ElevenLabs para o segundo Speaker","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Get text inputs from ElevenLabs.","icon":"speaker","base_classes":["Data"],"display_name":"ElevenLabs","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"audio_file_path","display_name":"Audio File Path","method":"generate_audio","value":"__UNDEFINED__","cache":true}],"field_order":["roteiro","id_speaker1","id_speaker2","api_key"],"beta":false,"edited":true,"lf_version":"1.0.18"},"id":"TextInput-GOnXo"},"selected":false,"width":384,"height":522,"dragging":false,"positionAbsolute":{"x":3035.688954525633,"y":53.67317184988366}}],"edges":[{"source":"TextInput-PbADQ","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-PbADQœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-93qT2","targetHandle":"{œfieldNameœ:œhost1œ,œidœ:œPrompt-93qT2œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"host1","id":"Prompt-93qT2","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-PbADQ","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-PbADQ{œdataTypeœ:œTextInputœ,œidœ:œTextInput-PbADQœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-93qT2{œfieldNameœ:œhost1œ,œidœ:œPrompt-93qT2œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"TextInput-DIzmc","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-DIzmcœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-93qT2","targetHandle":"{œfieldNameœ:œhost2œ,œidœ:œPrompt-93qT2œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"host2","id":"Prompt-93qT2","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-DIzmc","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-DIzmc{œdataTypeœ:œTextInputœ,œidœ:œTextInput-DIzmcœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-93qT2{œfieldNameœ:œhost2œ,œidœ:œPrompt-93qT2œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"TextInput-u0pOa","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-u0pOaœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-93qT2","targetHandle":"{œfieldNameœ:œpodcastœ,œidœ:œPrompt-93qT2œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"podcast","id":"Prompt-93qT2","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-u0pOa","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-u0pOa{œdataTypeœ:œTextInputœ,œidœ:œTextInput-u0pOaœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-93qT2{œfieldNameœ:œpodcastœ,œidœ:œPrompt-93qT2œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"File-BwTOa","sourceHandle":"{œdataTypeœ:œFileœ,œidœ:œFile-BwTOaœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-XjMWK","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-XjMWKœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-XjMWK","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"File","id":"File-BwTOa","name":"data","output_types":["Data"]}},"id":"reactflow__edge-File-BwTOa{œdataTypeœ:œFileœ,œidœ:œFile-BwTOaœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-XjMWK{œfieldNameœ:œdataœ,œidœ:œParseData-XjMWKœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","className":""},{"source":"ParseData-XjMWK","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-XjMWKœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-93qT2","targetHandle":"{œfieldNameœ:œcontextoœ,œidœ:œPrompt-93qT2œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"contexto","id":"Prompt-93qT2","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-XjMWK","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-XjMWK{œdataTypeœ:œParseDataœ,œidœ:œParseData-XjMWKœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-93qT2{œfieldNameœ:œcontextoœ,œidœ:œPrompt-93qT2œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"Prompt-93qT2","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-93qT2œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"GoogleGenerativeAIModel-fNqmX","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œGoogleGenerativeAIModel-fNqmXœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"GoogleGenerativeAIModel-fNqmX","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-93qT2","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-93qT2{œdataTypeœ:œPromptœ,œidœ:œPrompt-93qT2œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-GoogleGenerativeAIModel-fNqmX{œfieldNameœ:œinput_valueœ,œidœ:œGoogleGenerativeAIModel-fNqmXœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"GoogleGenerativeAIModel-fNqmX","sourceHandle":"{œdataTypeœ:œGoogleGenerativeAIModelœ,œidœ:œGoogleGenerativeAIModel-fNqmXœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"JSONCleaner-KDp3k","targetHandle":"{œfieldNameœ:œjson_strœ,œidœ:œJSONCleaner-KDp3kœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"json_str","id":"JSONCleaner-KDp3k","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"GoogleGenerativeAIModel","id":"GoogleGenerativeAIModel-fNqmX","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-GoogleGenerativeAIModel-fNqmX{œdataTypeœ:œGoogleGenerativeAIModelœ,œidœ:œGoogleGenerativeAIModel-fNqmXœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-JSONCleaner-KDp3k{œfieldNameœ:œjson_strœ,œidœ:œJSONCleaner-KDp3kœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"JSONCleaner-KDp3k","sourceHandle":"{œdataTypeœ:œJSONCleanerœ,œidœ:œJSONCleaner-KDp3kœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}","target":"JSONToDataComponent-i6WJv","targetHandle":"{œfieldNameœ:œjson_stringœ,œidœ:œJSONToDataComponent-i6WJvœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"json_string","id":"JSONToDataComponent-i6WJv","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"JSONCleaner","id":"JSONCleaner-KDp3k","name":"output","output_types":["Message"]}},"id":"reactflow__edge-JSONCleaner-KDp3k{œdataTypeœ:œJSONCleanerœ,œidœ:œJSONCleaner-KDp3kœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-JSONToDataComponent-i6WJv{œfieldNameœ:œjson_stringœ,œidœ:œJSONToDataComponent-i6WJvœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"JSONToDataComponent-i6WJv","sourceHandle":"{œdataTypeœ:œJSONToDataComponentœ,œidœ:œJSONToDataComponent-i6WJvœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"TextInput-GOnXo","targetHandle":"{œfieldNameœ:œroteiroœ,œidœ:œTextInput-GOnXoœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"roteiro","id":"TextInput-GOnXo","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"JSONToDataComponent","id":"JSONToDataComponent-i6WJv","name":"data","output_types":["Data"]}},"id":"reactflow__edge-JSONToDataComponent-i6WJv{œdataTypeœ:œJSONToDataComponentœ,œidœ:œJSONToDataComponent-i6WJvœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-TextInput-GOnXo{œfieldNameœ:œroteiroœ,œidœ:œTextInput-GOnXoœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","className":""}],"viewport":{"x":-1588.0131722044891,"y":203.9004021353474,"zoom":0.694075398628888}},"description":"Criador de Podcast baseado em PDF\n\n","name":"PodCaster","last_tested_version":"1.0.18","endpoint_name":null,"is_component":false}